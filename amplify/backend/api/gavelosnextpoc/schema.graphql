type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Auction 
@model
@key(name: "auctionsByMechanism", fields: ["mechanism"], queryField: "auctionsByMechanism")
@key(name: "auctionsByStatus", fields: ["status"], queryField: "auctionsByStatus")
@key(name: "auctionsByName", fields: ["name"], queryField: "auctionsByName") 
@auth(rules: [
  {allow: public, provider: apiKey, operations: [read]},
  {allow: owner, provider: userPools, operations: [read, create, delete, update]},
]) {
  id: ID!
  name: String
  status: AuctionStatusType
  mechanism: AuctionType
  startDateTime: AWSDateTime
  publishDateTime: AWSDateTime
  description: String
  image: S3Object
  deliveryTerms: String
  auctionables: [Auctionable] @connection(keyName: "byAuctionable", fields: ["id"])
  bids: [AuctionBid] @connection(keyName: "byAuctionBid", fields: ["id"])
}

type Auctionable 
@model
@key(name: "byAuctionable", fields: ["auctionID", "content"])
@auth(rules: [
  {allow: public, provider: apiKey, operations: [read]},
  {allow: owner, provider: userPools, operations: [read, create, delete, update]},
]) {
  id: ID!
  content: String
  description: String
  auctionID: ID
  quantity: Float
  unit: UnitType
  image: S3Object
  auction: Auction @connection
}

type AuctionBid 
@model
@key(name: "byAuctionBid", fields: ["auctionID", "value"])
@auth(rules: [
  {allow: public, provider: apiKey, operations: [read]},
  {allow: owner, provider: userPools, operations: [read, create, delete, update]},
]) {
  id: ID!
  auctionID: ID!
  value: Float
  unit: String
  auction: Auction @connection
}

enum AuctionType {
  dutch
  english
  texas
}

enum AuctionStatusType {
  draft
  preview
  live
  complete
}

enum UnitType {
  item
  pallet
  container
  pound
  kilo
  gram
  ounce
  ton
}